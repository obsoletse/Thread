第四章--Lock的使用
    本章将要介绍的是使用java5中的Lock对象也能实现同步效果,而且使用上更加灵活方便。
    本章主要掌握如下两个知识点:
        ReentrantLock类的使用;
        ReentrantWriteLock类的使用。

4.1 使用ReentrantLock类
        在java多线程中,可以使用synchronized关键字来实现线程之间的同步互斥,但是在JDK1.5中又新增了ReentrantLock类也能达到相同的效果,并且在
    扩展功能中更加强大,比如嗅探锁定,多路分支通知等功能。
        ①实现同步:
            (1)首先声明Lock对象锁；
            (2)执行业务前先调用lock方法获得对象锁,然后执行完再调用unLock方法释放对象锁;例:
            public class MyService {
                private Lock lock = new ReentrantLock();//声明对象锁
                public void testMethod(){
                    //1.调用lock方法获取对象锁,
                    lock.lock();
                    for (int i = 0 ; i < 2 ; i ++){
                        System.out.println("Thread name = " + Thread.currentThread().getName() + " i = " + (i+1));
                    }
                    //2.执行完业务释放锁
                    lock.unlock();
                }
            }

        ②实现等待/通知机制(Condition类)---可以唤醒指定线程
            (1)首先声明Lock对象锁;
            (2)接着声明对象监视器condition = lock.newCondition();
            使用如下:
                 condition.await(2,TimeUnit.SECONDS);//等待
                 condition.signal()//通知

    4.1.1 使用ReentrantLock实现同步:测试1
        运行结果:
            Thread name = B i = 1
            Thread name = B i = 2
            Thread name = C i = 1
            Thread name = C i = 2
            Thread name = A i = 1
            Thread name = A i = 2
        从运行的结果来看,当前线程打印完之后才释放锁,实现了同步,但是线程之间的打印是随机的,因为获得cpu资源的时机是随机的。

    4.1.2 使用ReentrantLock实现同步:测试2
        运行结果:
            Thread name = A start methodA  = 1575944820105
            Thread name = A end methodA = 1575944823123
            Thread name = B start methodB  = 1575944823123
            Thread name = B end methodB = 1575944826134
        休眠的时候等待,实现同步。

    4.1.3 使用Condition实现等待/通知机制: 必须要指定为哪个锁的对象监视器(在调用condition.await()前先调用lock())
        _1.错误用法:(未声明锁对象的对象监视器)
            运行结果:
                Exception in thread "a" java.lang.IllegalMonitorStateException
                抛出异常
        _2.正确用法:(先声明对象锁,调用lock方法获得同步监视器)
            运行结果:
                A
            进行等待;

    4.1.4 正确使用Condition实现等待/通知机制
        运行结果:
            await 的时间是: 1575955869124(先等待2S被唤醒)
            signal 的时间是: 1575955871125
            end time = 1575955873125
        结论:
            1.Object类中的wait()相当于Condition类中的await();
            2.Object类中的wait(long)相当于Condition类中的await(long time,TimeUnit timeUnit);
            3.Object类中的notify()相当于Condition类中的signal();
            4.Object类中的notifyAll()相当于Condition类中的signalAll();

    4.1.5  使用多个condition实现通知部分线程:(错误:这时通知所有)
        signAll()唤醒所有
        运行结果:
            Thread A await begin time = 1575959936847--await()释放锁,相差1
            Thread B await begin time = 1575959936848
            Thread A await end time = 1575959939850
            Thread B await end time = 1575959939852

    4.1.6 使用多个condition实现通知部分线程:
            每个方法对应不同的condition对象,唤醒时指定对于的condition对象唤醒
        运行结果:
            Thread A await1 begin time = 1575960309784
            Thread B await2 begin time = 1575960309790
            Thread A await1 end time = 1575960312787
            只结束threadA,threadB还在等待

    4.1.7 使用condition实现生产者/消费者模式:一对一交替打印
        运行结果:
            product生产了
            consumption消费了
            product生产了
            consumption消费了
            product生产了
            consumption消费了

    4.1.8 使用condition实现生产者/消费者模式:多对多打印
        运行结果:
            product1生产了*
            product1在等待
            consumption2消费了*
            consumption2在等待
            product2生产了*
            product2在等待
            consumption1消费了*
            consumption1在等待

    4.1.9 公平锁和非公平锁

